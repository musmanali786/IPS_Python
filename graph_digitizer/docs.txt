Single File app

import sys
import json
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QLabel, QPushButton, QLineEdit, QListWidget, QFileDialog, 
                             QMessageBox, QFormLayout, QDoubleSpinBox, QTabWidget)
from PyQt5.QtGui import QPixmap, QPainter, QPen, QColor
from PyQt5.QtCore import Qt, QPointF
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import io
from PIL import Image


class GraphDigitizerTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.points = []
        self.image_path = ""
        self.x_label = "X Axis"
        self.y_label = "Y Axis"
        self.x_min = 0
        self.x_max = 10
        self.y_min = 0
        self.y_max = 10
        
        self.init_ui()
        
    def init_ui(self):
        self.layout = QHBoxLayout(self)
        
        # Left panel (graph display)
        self.left_panel = QWidget()
        self.left_layout = QVBoxLayout(self.left_panel)
        
        # Graph display area
        self.graph_label = QLabel()
        self.graph_label.setAlignment(Qt.AlignCenter)
        self.graph_label.setStyleSheet("background-color: white; border: 1px solid black;")
        self.left_layout.addWidget(self.graph_label)
        
        # Upload button
        self.upload_btn = QPushButton("Upload Graph Image")
        self.upload_btn.clicked.connect(self.upload_image)
        self.left_layout.addWidget(self.upload_btn)
        
        # Right panel (controls and points list)
        self.right_panel = QWidget()
        self.right_layout = QVBoxLayout(self.right_panel)
        
        # Axis controls
        self.axis_controls = QWidget()
        self.axis_layout = QFormLayout(self.axis_controls)
        
        self.x_label_input = QLineEdit(self.x_label)
        self.y_label_input = QLineEdit(self.y_label)
        
        self.x_min_input = QDoubleSpinBox()
        self.x_min_input.setRange(-1e9, 1e9)
        self.x_min_input.setValue(self.x_min)
        
        self.x_max_input = QDoubleSpinBox()
        self.x_max_input.setRange(-1e9, 1e9)
        self.x_max_input.setValue(self.x_max)
        
        self.y_min_input = QDoubleSpinBox()
        self.y_min_input.setRange(-1e9, 1e9)
        self.y_min_input.setValue(self.y_min)
        
        self.y_max_input = QDoubleSpinBox()
        self.y_max_input.setRange(-1e9, 1e9)
        self.y_max_input.setValue(self.y_max)
        
        self.axis_layout.addRow("X Axis Label:", self.x_label_input)
        self.axis_layout.addRow("Y Axis Label:", self.y_label_input)
        self.axis_layout.addRow("X Min:", self.x_min_input)
        self.axis_layout.addRow("X Max:", self.x_max_input)
        self.axis_layout.addRow("Y Min:", self.y_min_input)
        self.axis_layout.addRow("Y Max:", self.y_max_input)
        
        self.right_layout.addWidget(self.axis_controls)
        
        # Points list
        self.points_label = QLabel("Selected Points:")
        self.right_layout.addWidget(self.points_label)
        
        self.points_list = QListWidget()
        self.right_layout.addWidget(self.points_list)
        
        # Button panel
        self.button_panel = QWidget()
        self.button_layout = QHBoxLayout(self.button_panel)
        
        self.clear_btn = QPushButton("Clear Points")
        self.clear_btn.clicked.connect(self.clear_points)
        self.button_layout.addWidget(self.clear_btn)
        
        self.export_pdf_btn = QPushButton("Export PDF")
        self.export_pdf_btn.clicked.connect(self.export_to_pdf)
        self.button_layout.addWidget(self.export_pdf_btn)
        
        self.export_json_btn = QPushButton("Export JSON")
        self.export_json_btn.clicked.connect(self.export_to_json)
        self.button_layout.addWidget(self.export_json_btn)
        
        self.right_layout.addWidget(self.button_panel)
        
        # Add panels to main layout
        self.layout.addWidget(self.left_panel, 70)
        self.layout.addWidget(self.right_panel, 30)
        
        # Connect mouse click event
        self.graph_label.mousePressEvent = self.graph_clicked
        
    def upload_image(self):
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(
            self, "Open Graph Image", "", 
            "Image Files (*.png *.jpg *.jpeg *.bmp *.gif)", 
            options=options
        )
        
        if file_name:
            self.image_path = file_name
            pixmap = QPixmap(file_name)
            self.graph_label.setPixmap(pixmap.scaled(
                self.graph_label.width(), 
                self.graph_label.height(), 
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            ))
            self.points = []
            self.update_points_list()
    
    def graph_clicked(self, event):
        if not self.image_path:
            QMessageBox.warning(self, "Warning", "Please upload a graph image first.")
            return
            
        if event.button() == Qt.LeftButton:
            # Get click position relative to the label
            pos = event.pos()
            pixmap = self.graph_label.pixmap()
            if pixmap:
                # Calculate position within the actual image
                img_width = pixmap.width()
                img_height = pixmap.height()
                
                label_width = self.graph_label.width()
                label_height = self.graph_label.height()
                
                x_offset = (label_width - img_width) // 2
                y_offset = (label_height - img_height) // 2
                
                # Adjust for image centering in the label
                img_x = pos.x() - x_offset
                img_y = pos.y() - y_offset
                
                if 0 <= img_x <= img_width and 0 <= img_y <= img_height:
                    # Get current axis settings
                    x_min = self.x_min_input.value()
                    x_max = self.x_max_input.value()
                    y_min = self.y_min_input.value()
                    y_max = self.y_max_input.value()
                    
                    # Convert to data coordinates
                    x_data = x_min + (img_x / img_width) * (x_max - x_min)
                    y_data = y_max - (img_y / img_height) * (y_max - y_min)
                    
                    # Store the point (data coordinates)
                    self.points.append((x_data, y_data))
                    self.update_points_list()
                    self.draw_points_on_image()
    
    def draw_points_on_image(self):
        if not self.image_path or not self.points:
            return
            
        pixmap = QPixmap(self.image_path)
        pixmap = pixmap.scaled(
            self.graph_label.width(), 
            self.graph_label.height(), 
            Qt.KeepAspectRatio,
            Qt.SmoothTransformation
        )
        
        painter = QPainter(pixmap)
        painter.setPen(QPen(QColor(255, 0, 0), 5))  # Red pen, 5px width
        
        # Get current axis settings
        x_min = self.x_min_input.value()
        x_max = self.x_max_input.value()
        y_min = self.y_min_input.value()
        y_max = self.y_max_input.value()
        
        img_width = pixmap.width()
        img_height = pixmap.height()
        
        for point in self.points:
            # Convert data coordinates back to image coordinates for display
            x_data, y_data = point
            img_x = (x_data - x_min) / (x_max - x_min) * img_width
            img_y = img_height - (y_data - y_min) / (y_max - y_min) * img_height
            
            painter.drawPoint(QPointF(img_x, img_y))
        
        painter.end()
        self.graph_label.setPixmap(pixmap)
    
    def update_points_list(self):
        self.points_list.clear()
        
        for i, (x, y) in enumerate(self.points):
            self.points_list.addItem(f"Point {i+1}: ({x:.2f}, {y:.2f})")
    
    def clear_points(self):
        self.points = []
        self.update_points_list()
        if self.image_path:
            pixmap = QPixmap(self.image_path)
            self.graph_label.setPixmap(pixmap.scaled(
                self.graph_label.width(), 
                self.graph_label.height(), 
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            ))
    
    def export_to_pdf(self):
        if not self.points:
            QMessageBox.warning(self, "Warning", "No points to export.")
            return
            
        # Get current settings
        x_label = self.x_label_input.text()
        y_label = self.y_label_input.text()
        x_min = self.x_min_input.value()
        x_max = self.x_max_input.value()
        y_min = self.y_min_input.value()
        y_max = self.y_max_input.value()
        
        # Create a PDF
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(
            self, "Save PDF", "", 
            "PDF Files (*.pdf)", 
            options=options
        )
        
        if file_name:
            if not file_name.endswith('.pdf'):
                file_name += '.pdf'
                
            # Create matplotlib figure
            fig = Figure(figsize=(8, 6))
            ax = fig.add_subplot(111)
            
            # Plot the points
            x_vals = [p[0] for p in self.points]
            y_vals = [p[1] for p in self.points]
            ax.plot(x_vals, y_vals, 'ro-')
            
            # Set labels and limits
            ax.set_xlabel(x_label)
            ax.set_ylabel(y_label)
            ax.set_xlim(x_min, x_max)
            ax.set_ylim(y_min, y_max)
            ax.grid(True)
            
            # Save to PDF
            fig.savefig(file_name, bbox_inches='tight')
            QMessageBox.information(self, "Success", f"Graph exported to {file_name}")
    
    def export_to_json(self):
        if not self.points:
            QMessageBox.warning(self, "Warning", "No points to export.")
            return
            
        # Get current settings
        data = {
            "points": self.points,
            "x_label": self.x_label_input.text(),
            "y_label": self.y_label_input.text(),
            "x_min": self.x_min_input.value(),
            "x_max": self.x_max_input.value(),
            "y_min": self.y_min_input.value(),
            "y_max": self.y_max_input.value(),
            "image_path": self.image_path
        }
        
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(
            self, "Save JSON", "", 
            "JSON Files (*.json)", 
            options=options
        )
        
        if file_name:
            if not file_name.endswith('.json'):
                file_name += '.json'
                
            with open(file_name, 'w') as f:
                json.dump(data, f, indent=4)
                
            QMessageBox.information(self, "Success", f"Data exported to {file_name}")


class GraphDigitizer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Graph Digitizer")
        self.setGeometry(100, 100, 1000, 600)
        
        self.init_ui()
        
    def init_ui(self):
        # Create tab widget
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # Add initial tab
        self.add_tab()
        
        # Add button to add new tabs
        self.add_tab_btn = QPushButton("+ Add New Tab")
        self.add_tab_btn.clicked.connect(self.add_tab)
        self.tabs.setCornerWidget(self.add_tab_btn)
    
    def add_tab(self):
        tab = GraphDigitizerTab(self)
        tab_index = self.tabs.addTab(tab, f"Graph {self.tabs.count() + 1}")
        self.tabs.setCurrentIndex(tab_index)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GraphDigitizer()
    window.show()
    sys.exit(app.exec_())

Multifile App

I'll restructure the code into multiple files and add the requested features:

1. Split code into modular files
2. Add a static "Preview" tab
3. Enable loading multiple JSON files
4. Combine graphs with legends
5. Add export functionality for combined graphs

Here's the new structure:

```
graph_digitizer/
│── __init__.py
│── main.py              # Main application window
│── digitizer_tab.py     # Individual graph tab
│── preview_tab.py       # Preview combined graphs tab
│── utils.py             # Utility functions
```

## 1. main.py

```python
import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QPushButton)
from digitizer_tab import GraphDigitizerTab
from preview_tab import PreviewTab

class GraphDigitizer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Graph Digitizer")
        self.setGeometry(100, 100, 1200, 800)
        self.init_ui()
        
    def init_ui(self):
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # Add first digitizer tab
        self.add_digitizer_tab()
        
        # Add preview tab
        self.preview_tab = PreviewTab(self)
        self.tabs.addTab(self.preview_tab, "Preview")
        
        # Add button to add new tabs
        self.add_tab_btn = QPushButton("+ Add New Tab")
        self.add_tab_btn.clicked.connect(self.add_digitizer_tab)
        self.tabs.setCornerWidget(self.add_tab_btn)
    
    def add_digitizer_tab(self):
        tab = GraphDigitizerTab(self)
        tab_index = self.tabs.addTab(tab, f"Graph {self.tabs.count()}")
        self.tabs.setCurrentIndex(tab_index)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = GraphDigitizer()
    window.show()
    sys.exit(app.exec_())
```

## 2. digitizer_tab.py

```python
import json
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
                             QLineEdit, QListWidget, QFileDialog, QMessageBox, 
                             QFormLayout, QDoubleSpinBox)
from PyQt5.QtGui import QPixmap, QPainter, QPen, QColor
from PyQt5.QtCore import Qt, QPointF
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

class GraphDigitizerTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.points = []
        self.image_path = ""
        self.x_label = "X Axis"
        self.y_label = "Y Axis"
        self.x_min = 0
        self.x_max = 10
        self.y_min = 0
        self.y_max = 10
        self.graph_name = "Graph"
        self.line_color = "#1f77b4"  # Default matplotlib blue
        self.init_ui()
        
    def init_ui(self):
        # ... (same UI initialization as before, but add name and color controls)
        
    def get_graph_data(self):
        return {
            "name": self.graph_name,
            "points": self.points,
            "x_label": self.x_label_input.text(),
            "y_label": self.y_label_input.text(),
            "x_min": self.x_min_input.value(),
            "x_max": self.x_max_input.value(),
            "y_min": self.y_min_input.value(),
            "y_max": self.y_max_input.value(),
            "color": self.line_color,
            "image_path": self.image_path
        }
    
    # ... (keep all other methods from previous implementation)
```

## 3. preview_tab.py

```python
import json
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QFileDialog, QListWidget, QMessageBox)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5.QtCore import Qt

class PreviewTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.graph_data = []
        self.init_ui()
        
    def init_ui(self):
        self.layout = QVBoxLayout(self)
        
        # Canvas for preview
        self.figure = Figure(figsize=(8, 6))
        self.canvas = FigureCanvas(self.figure)
        self.layout.addWidget(self.canvas)
        
        # Controls
        self.controls = QHBoxLayout()
        
        self.load_json_btn = QPushButton("Load JSON")
        self.load_json_btn.clicked.connect(self.load_json)
        self.controls.addWidget(self.load_json_btn)
        
        self.clear_btn = QPushButton("Clear All")
        self.clear_btn.clicked.connect(self.clear_all)
        self.controls.addWidget(self.clear_btn)
        
        self.export_btn = QPushButton("Export Combined PDF")
        self.export_btn.clicked.connect(self.export_combined_pdf)
        self.controls.addWidget(self.export_btn)
        
        self.layout.addLayout(self.controls)
        
        # Loaded graphs list
        self.graphs_list = QListWidget()
        self.graphs_list.setSelectionMode(QListWidget.MultiSelection)
        self.layout.addWidget(self.graphs_list)
    
    def load_json(self):
        options = QFileDialog.Options()
        files, _ = QFileDialog.getOpenFileNames(
            self, "Open JSON Files", "", 
            "JSON Files (*.json)", 
            options=options
        )
        
        for file in files:
            try:
                with open(file, 'r') as f:
                    data = json.load(f)
                    self.graph_data.append(data)
                    self.graphs_list.addItem(data.get("name", "Unnamed Graph"))
            except Exception as e:
                QMessageBox.warning(self, "Error", f"Failed to load {file}: {str(e)}")
        
        self.update_preview()
    
    def clear_all(self):
        self.graph_data = []
        self.graphs_list.clear()
        self.update_preview()
    
    def update_preview(self):
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        
        for data in self.graph_data:
            if not data.get("points"):
                continue
                
            x_vals = [p[0] for p in data["points"]]
            y_vals = [p[1] for p in data["points"]]
            
            ax.plot(
                x_vals, y_vals, 
                'o-', 
                color=data.get("color", "#1f77b4"),
                label=data.get("name", "Unnamed Graph")
            )
        
        if self.graph_data:
            first_data = self.graph_data[0]
            ax.set_xlabel(first_data.get("x_label", "X Axis"))
            ax.set_ylabel(first_data.get("y_label", "Y Axis"))
            ax.set_xlim(first_data.get("x_min", 0), first_data.get("x_max", 10))
            ax.set_ylim(first_data.get("y_min", 0), first_data.get("y_max", 10))
        
        ax.grid(True)
        ax.legend(loc='upper right')
        self.canvas.draw()
    
    def export_combined_pdf(self):
        if not self.graph_data:
            QMessageBox.warning(self, "Warning", "No graphs to export.")
            return
            
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(
            self, "Save Combined PDF", "", 
            "PDF Files (*.pdf)", 
            options=options
        )
        
        if file_name:
            if not file_name.endswith('.pdf'):
                file_name += '.pdf'
                
            fig = Figure(figsize=(8, 6))
            ax = fig.add_subplot(111)
            
            for data in self.graph_data:
                if not data.get("points"):
                    continue
                    
                x_vals = [p[0] for p in data["points"]]
                y_vals = [p[1] for p in data["points"]]
                
                ax.plot(
                    x_vals, y_vals, 
                    'o-', 
                    color=data.get("color", "#1f77b4"),
                    label=data.get("name", "Unnamed Graph")
                )
            
            first_data = self.graph_data[0]
            ax.set_xlabel(first_data.get("x_label", "X Axis"))
            ax.set_ylabel(first_data.get("y_label", "Y Axis"))
            ax.set_xlim(first_data.get("x_min", 0), first_data.get("x_max", 10))
            ax.set_ylim(first_data.get("y_min", 0), first_data.get("y_max", 10))
            
            ax.grid(True)
            ax.legend(loc='upper right')
            
            fig.savefig(file_name, bbox_inches='tight')
            QMessageBox.information(self, "Success", f"Combined graph exported to {file_name}")
```

## 4. utils.py (optional)

```python
def validate_graph_data(data):
    """Validate graph data structure"""
    required_fields = ['points', 'x_label', 'y_label', 'x_min', 'x_max', 'y_min', 'y_max']
    return all(field in data for field in required_fields)

def combine_graphs(graphs_list):
    """Combine multiple graphs into a single dataset"""
    combined = {
        'points': [],
        'x_label': '',
        'y_label': '',
        'x_min': 0,
        'x_max': 10,
        'y_min': 0,
        'y_max': 10
    }
    
    if graphs_list:
        combined.update({
            'x_label': graphs_list[0].get('x_label', 'X Axis'),
            'y_label': graphs_list[0].get('y_label', 'Y Axis'),
            'x_min': graphs_list[0].get('x_min', 0),
            'x_max': graphs_list[0].get('x_max', 10),
            'y_min': graphs_list[0].get('y_min', 0),
            'y_max': graphs_list[0].get('y_max', 10)
        })
        
        for graph in graphs_list:
            if 'points' in graph:
                combined['points'].extend(graph['points'])
    
    return combined
```

## Key Features Added:

1. **Tab System**:
   - Main tab for individual graphs
   - Static Preview tab for combined view

2. **JSON Loading**:
   - Load multiple JSON files in Preview tab
   - Each graph maintains its color and name

3. **Combined View**:
   - All graphs plotted together
   - Automatic legend generation
   - Consistent axis scaling

4. **Export Options**:
   - Individual graph export from digitizer tabs
   - Combined export from Preview tab

5. **Improved Data Structure**:
   - Each graph has name and color properties
   - Better data validation

To use this enhanced version:

1. Create individual graphs in the digitizer tabs
2. Export them to JSON
3. Load multiple JSON files in the Preview tab
4. View combined graphs with legends
5. Export the combined view to PDF

The code is now more modular and maintainable with clear separation of concerns between components.